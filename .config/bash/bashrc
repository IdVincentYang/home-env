################################################################################
# "read" Usage: read -r [VAR]
#   -r causes the string to be interpreted "raw" (without considering backslash escapes)
#
# extension="${basename##*.}"
# filename="${basename%.*}"
################################################################################

################################################################################
# Bash Env definations begin:
# Specify XDG Base Directories for macOS
if [[ $OSTYPE == 'darwin'* ]]; then
    # $XDG_DATA_HOME: Directory containing user-specific data files. Default value is $HOME/.local/share.
    export XDG_DATA_HOME="${HOME}/.local/share"
    # $XDG_CONFIG_HOME: Directory containing user-specific configuration files. Default value is $HOME/.config.
    export XDG_CONFIG_HOME="${HOME}/.config"
    # $XDG_CACHE_HOME: Directory containing user-specific non-essential data files. Default value is $HOME/.cache.
    #   In MacOS, $HOME/Library/Caches: This directory contains caches used by applications installed by the user, such as browser caches, app caches, and system caches.
    export XDG_CACHE_HOME="${HOME}/Library/Caches"
    # $XDG_RUNTIME_DIR: Directory containing runtime files that should be deleted when the user logs out. Default value is /run/user/$UID, where $UID is the user ID.
    export XDG_RUNTIME_DIR="${HOME}/Library/Caches/XDG_Runtime"
    # $XDG_DOCUMENTS_DIR: Directory containing the user's documents. Default value is $HOME/Documents.
    export XDG_DOCUMENTS_DIR="${HOME}/Documents"
    # $XDG_DOWNLOAD_DIR: Directory containing the user's downloads. Default value is $HOME/Downloads.
    export XDG_DOWNLOAD_DIR="${HOME}/Downloads"
    # $XDG_MUSIC_DIR: Directory containing the user's music. Default value is $HOME/Music.
    export XDG_MUSIC_DIR="${HOME}/Music"
    # $XDG_PICTURES_DIR: Directory containing the user's pictures. Default value is $HOME/Pictures.
    export XDG_PICTURES_DIR="${HOME}/Pictures"
    # $XDG_PUBLICSHARE_DIR: Directory containing public files. Default value is $HOME/Public.
    export XDG_PUBLICSHARE_DIR="${HOME}/Public"
    # $XDG_TEMPLATES_DIR: Directory containing templates. Default value is $HOME/Templates.
    export XDG_TEMPLATES_DIR="${HOME}/Documents/XDG_Templates"
    # $XDG_VIDEOS_DIR: Directory containing the user's videos. Default value is $HOME/Videos.
    export XDG_VIDEOS_DIR="${HOME}/Movies"
fi

export BASH_CFG="${XDG_CONFIG_HOME}/bash"

# 导出二笔输入法码表路径: Path of ErBi
export PEB="${HOME}/Library/Application Support/OpenVanilla/UserData/TableBased/erbi.cin"


export LANG=en_US.UTF-8

# custom bin path and home brew sbin path, other brew path added by /etc/paths
export PATH=$HOME/.local/bin:/usr/local/sbin:${PATH}

# Bash Env definations end.
################################################################################

# Load persional alias.
if [ -f "${BASH_CFG}/alias" ]; then
    . "${BASH_CFG}/alias"
fi

################################################################################
# Helper functions defination begin:
#   - alert
#   - notify
#   - ensure
#   - proxy<list|set|unset>

# display alert
function alert() {
    ASCRIPT="display alert \"$1\" message \"$2 $3 $4 $5 $6 $7 $8 $9\""
    osascript -e "${ASCRIPT}"
}

function notify() {
    WITH_TITLE=""
    if [ -n "$2" ] ; then
        WITH_TITLE="with title \"$2\""
    fi
    WITH_SUBTITLE=""
    if [ -n "$3" ] ; then
        WITH_SUBTITLE="subtitle \"$3\""
    fi
    ASCRIPT="display notification \"$1\" ${WITH_TITLE} ${WITH_SUBTITLE}"
    osascript -e "${ASCRIPT}"
}

function ensure() {
    echo "Ensure cmd: $@"
    while : ; do
        $@
        [ $? -eq 0 ] && break
    done
    terminal-notifier -title "Execute CMD Complete!" -message "$@"
}

function proxylist() {
    echo "ALL_PROXY=$ALL_PROXY"
    echo "FTP_PROXY=$FTP_PROXY"
    echo "HTTP_PROXY=$HTTP_PROXY"
    echo "HTTPS_PROXY=$HTTPS_PROXY"
    echo "SOCKS_PROXY=$SOCKS_PROXY"
}

function proxyset() {
    if [[ $# -eq 0 ]] ; then
        echo 'Set environment proxies, usage: proxyset [-afhHs <proxy>] [-v] [default proxy for others]
    -a  set ALL_PROXY
    -f  set FTP_PROXY
    -h  set HTTP_PROXY
    -H  set HTTPS_PROXY
    -s  set SOCKS_PROXY
    -v  verbose above proxies setting

    default porxy argument can be ignored, in this case, the remain proxies not specified will keep before setting.

    eg: proxyset -s "socks5h://127.0.0.1:7891" -v "http://127.0.0.1:7890"
    '
        return
    fi

    # define temp vars for store proxies from args
    _P=""
    _PA=""
    _PF=""
    _PH=""
    _PHS=""
    _PS=""

    while getopts "a:f:h:H:s:v" arg; do
        case $arg in
            a)
                _PA="$OPTARG"
                ;;
            f)
                _PF="$OPTARG"
                ;;
            h)
                _PH="$OPTARG"
                ;;
            H)
                _PHS="$OPTARG"
                ;;
            s)
                _PS="$OPTARG"
                ;;
            v)
                _VERBOSE=1
                ;;
        esac
    done
    shift $(expr $OPTIND - 1)
    if [[ $# -gt 0 ]] ; then
        _P="$@"
    fi

    # if has -ha arg, set to ALL_PROXY, else
    #   if default proxy given, set to ALL_PROXY
    if [[ ! -z "$_PA" ]] ; then
        export ALL_PROXY="$_PA"
    else
        if [[ ! -z "$_P" ]] ; then
            export ALL_PROXY="$_P"
        fi
    fi
    # set FTP_PROXY
    if [[ ! -z "$_PF" ]] ; then
        exprot FTP_PROXY="$_PF"
    else
        if [[ ! -z "$_P" ]] ; then
            export FTP_PROXY="$_P"
        fi
    fi
    # set HTTP_PROXY
    if [[ ! -z "$_PH" ]] ; then
        exprot HTTP_PROXY="$_PH"
    else
        if [[ ! -z "$_P" ]] ; then
            export HTTP_PROXY="$_P"
        fi
    fi
    # set HTTPS_PROXY
    if [[ ! -z "$_PHS" ]] ; then
        export HTTPS_PROXY="$_PHS"
    else
        if [[ ! -z "$_P" ]] ; then
            export HTTPS_PROXY="$_P"
        fi
    fi
    # set SOCKS_PROXY
    if [[ ! -z "$_PS" ]] ; then
        export SOCKS_PROXY="$_PS"
    else
        if [[ ! -z "$_P" ]] ; then
            export SOCKS_PROXY="$_P"
        fi
    fi

    if [[ ! -z $_VERBOSE ]] ; then
        proxylist
    fi
}

function proxyunset() {
    unset ALL_PROXY
    unset FTP_PROXY
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset SOCKS_PROXY
}

# Helper functions defination end.
################################################################################

proxyset -s "socks5h://127.0.0.1:7891" "http://127.0.0.1:7890"

if [ $VIM ]; then
        export PS1='[VIM]\h:\w\$ '
fi

################################################################################
# command tools config begin:

# home brew
export HOMEBREW_NO_AUTO_UPDATE=1
# ffmpeg
# export FONTCONFIG_PATH=/usr/local/etc/fonts

# fzf config: https://github.com/junegunn/fzf.vim
if [ -f `which fzf` ]; then
    # https://zhuanlan.zhihu.com/p/41859976
    if [ -f `which fd` ]; then
        export FZF_DEFAULT_COMMAND='fd --type file'
    elif [ -f `which ag` ]; then
        export FZF_DEFAULT_COMMAND='ag -g ""'
    fi
    if [ ! -z "$FZF_DEFAULT_COMMAND" ]; then
        export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    fi
    # FZF_COMPLETION_TRIGGER: 默认 **<tab>
    # fzf 参数详见 fzf -h
    export FZF_DEFAULT_OPTS="--height 40% --layout=reverse --preview '(highlight -O ansi {} || cat {}) 2> /dev/null | head -500'"
fi

# JVM config
if which jenv > /dev/null; then eval "$(jenv init -)"; fi

# go config
# export GOPATH=~/go/.path
# export GOBIN=~/go/.bin
# export PATH=${GOBIN}:${PATH}

# android sdk config
export ANDROID_SDK_ROOT=~/Library/Android/sdk
export ANDROID_HOME=${ANDROID_SDK_ROOT}
export PATH=${ANDROID_SDK_ROOT}/platform-tools:${PATH}

# wine config
# Override wine default storage folder $XDG_DATA_HOME to it's sub dir wineprefixes/default
export WINE_PREFIX_ROOT="${XDG_DATA_HOME}/wineprefixes"
export WINEPREFIX="${WINE_PREFIX_ROOT}/default"
# If want change wine environment, can source "$BASH_CFG/wine" for helper function:
#   - winenv
#   - wine
# After MacOS 10.15, MacOS don't support 32 bit binary, but 32 bit wine includes in wine-stable yet.
#   So WINEARCH must be win64 and alias 32 bit binaries to 64 bit version.
export WINEARCH=win64
alias wine=wine64

# Command tools config end.
################################################################################
